services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: citizen_feedback_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: citizen_feedback
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - citizen_feedback_network

  # Redis (for sessions and caching)
  redis:
    image: redis:7-alpine
    container_name: citizen_feedback_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - citizen_feedback_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: citizen_feedback_api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/citizen_feedback
      FRONTEND_URL: http://localhost:3000
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    networks:
      - citizen_feedback_network
    volumes:
      - ./backend:/app
      - /app/node_modules

  # Frontend (Next.js)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: citizen_feedback_frontend
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:5000/api
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - citizen_feedback_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: citizen_feedback_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - citizen_feedback_network

volumes:
  postgres_data:

networks:
  citizen_feedback_network:
    driver: bridge
